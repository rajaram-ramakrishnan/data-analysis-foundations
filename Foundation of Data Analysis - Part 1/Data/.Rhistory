typeof(student1[1])
student1[1:3]
typeof (student1[1:3])
student1 <- list(name = student.names[1],
weight = student.weights[1],
gender = student.genders[1],
physics = student.physics.marks[1],
chemistry = student.chemistry.marks[1])
student1[["name"]]
student1$weight
student$gender
student1$gender
student1[c("physics","chemistry")]
length(student1)
student.names <- c("Raj","Rahul","Priya","Poonam")  #character vector
student.names
is.character(student,names)
is.character(student.names)
str(student.names)
is.numeric(student.weights)
is.integer(student.weights)
is.integer(student.physics.marks)
vector("integer", length = 4)
vector("integer", length = 4932)
vector("integer", length = 49)
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L)
student.physics.marks + student.chemistry.marks #arithmetic operation
student.physics.marks >= 75 #logical operation
student.physics.marks[[1]]
student.physics.marks[1]
student.physics.marks[2]
student.physics.marks[1:3]
student.physics.marks[c(TRUE,FALSE,T,F)]
student.physics,marks[student.physics.marks%%10=0]
student.physics.marks[student.physics.marks%%10=0]
student.physics.marks%%10
student.physics.marks[student.physics.marks%%10==0]
student.weights <- c( 60.5, 72.5 , 45.2,  "47.5")
str(student.weights)
as.numeric(students.weights > 50)
as.numeric(student.weights > 50)
as.integer(student.weights)
student.names <- c("Raj","Rahul","Priya","Poonam")
student.weights <- c( 60.5, 72.5 , 45.2,  47.5)
student.genders <- factor(c("Male","Male","Female","Female"))
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L)
students <= data.frame(student,names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks
)
students <- data.frame(student,names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks
)
students <- data.frame(student.names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks
)
typeof(students)
students
str(students)
typeof(students)
students <- data.frame(student.names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks,
stringsAsFactors = FALSE)
typeof(students)
students
str(students)
students[1]
typeof(students[1])
students[[1]]
typeof(students[[1])
typeof(students[[1]])
students[["student,names"]]
students[["student.names"]]
typeof(students[["student.names"]])
students$student.names
typeof(students$student.names)
students[1:3]
students[c(student.physics.marks,student.chemistry.marks)]
students[c("student.physics.marks","student.chemistry.marks")]
students[1,2]
students[1:3,1:2]
students[1:2,1:3]
students[c(1,2),c(1,3)]
students[1,]
students[ ,1]
students[student.genders=="Male",]
students[student.genders!="Male",]
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L)
student.marks = rbind(student.physics.marks,student.chemistry.marks)
student.marks
student.marks = cbind(student.physics.marks,student.chemistry.marks)
student.marks
rownames(student.marks) <- c("Raj","Rahul","Priya","Poonam")
student.marks
str(student.marks)
student.marks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=4,nrow=2
,byrow=TRUE)
student.marks
student.marks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=4,nrow=2
)
student.marks
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L)
student.marks <-cbind(student.physics.marks , student.chemistry.marks)
rownames(student.marks) <- c("Raj","Rahul","Priya","Poonam")
student.marks
student.marks[,]
student.marks[2,2]
student.marks[2,]
student.marks[ ,2]
student.marks[1:3,]
student.marks[c(1,3),]
student.marks[c(T,F,F,T),]
student.marks
rowsums(student.marks)
rowSums(student.marks)
colSums(student.marks)
colMeans(student.marks)
class1.student.physics.marks <- c( 70L , 75L , 80L,  85L)
class1.student.chemistry.marks <- c(60L, 70L, 85L, 70L)
class1.student.marks <-cbind(class1.student.physics.marks
, class1.student.chemistry.marks)
class1.student.marks
class2.student.physics.marks <- c( 71L , 76L , 81L,  86L)
class2.student.chemistry.marks <- c(61L, 71L, 86L, 71L)
class2.student.marks <-cbind(class2.student.physics.marks
, class2.student.chemistry.marks)
class2.student.marks
student.marks <- array(c(class1.student.marks, class2.student.marks), dim=c(4,2,2))
student.marks
student.marks[2,2,2]
student.marks[1:3,2,]
SDSFoundations::BikeData
library(SDSFoundations)
bike <- BikeData
view(bike)
view(BikeData)
View(bike)
View(bike)
student.physics.quiz.marks <- c(70L, 75L, 80L, 85L)
student.physics.viva.marks <- c(7L, 5L, 8L, 6L)
GetTotalMarks  <- function(quiz.marks, viva.marks) {
total.marks <- quiz.marks + viva.marks
total.marks
}
student.physics.total.marks <- GetTotalMarks (student.physics.quiz.marks, student.physics.viva.marks)
student.chemistry.quiz.marks <- c(60L, 70L, 85L, 70L)
student.chemistry.viva.marks <- c(8L, 4L, 7L, 9L)
student.chemistry.total.marks <- GetTotalMarks(student.chemistry.quiz.marks, student.chemistry.viva.marks)
student.chemistry.total.marks
GetTotalMarks  <- function(quiz.marks, viva.marks, assignment.marks = 5L) {
total.marks <- quiz.marks + viva.marks + assignment.marks
total.marks
}
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L))
GetTotalMarks  <- function(quiz.marks, viva.marks, assignment.marks = 5L, ...) {
total.marks <- quiz.marks + viva.marks + assignment.marks + sum(...)
total.marks
}
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L), creativity.marks = 2)
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L), creativity.marks = 2,
attendence.marks = 3)
GetTotalMarks  <- function(quiz.marks, viva.marks, assignment.marks = 5L, ...) {
total.marks <- quiz.marks + viva.marks + assignment.marks + sum(...)
extra.arguments <- list(...)
extra.arguments
total.marks
}
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L), creativity.marks = 2,
attendence.marks = 3)
GetTotalMarks  <- function(quiz.marks, viva.marks, assignment.marks = 5L, ...) {
total.marks <- quiz.marks + viva.marks + assignment.marks + sum(...)
extra.arguments <- list(...)
print(extra.arguments)
total.marks
}
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L), creativity.marks = 2,
attendence.marks = 3)
GetTotalMarks  <- function(quiz.marks, viva.marks, extra.marks = average.viva.marks) {
average.viva.marks <- mean(viva.marks)
total.marks <- quiz.marks + viva.marks + extra.marks
total.marks
}
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
GetMarksSummary <- function (quiz.marks , viva.marks) {
total.marks <- quiz.marks + viva.marks
avg.marks   <- mean(total.marks)
return(list(total = total.marks, avg = avg.marks))
}
GetMarksSummary(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
GetTotalMarks <- function(quiz.marks, viva.marks) {
total.marks <- quiz.marks + viva.marks
total.marks
}
GetTotalMarks
MyGetTotalMarks
MyGetTotalMarks <- GetTotalMarks
MyGetTotalMarks
do.call(function(quiz.marks, viva.marks) {
total.marks <- quiz.marks + viva.marks
total.marks
}, list(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L)))
IsGoodPerformanceByBatch <- function(test.marks) {
average.marks <- mean(test.marks)
performance.test <- average.marks >= 75
print(paste("average marks :",average.marks, "performance.test :",performance.test))
if(performance.test){
print("Overall performance of the batch is brilliant")
}
else{
print("Overall performance of the batch is average")
}
print("performance test completed")
}
IsGoodPerformanceByBatch(test.marks= c( 70L , 75L , 80L,  85L))
IsGoodPerformanceByBatch(test.marks= c( 50L , 60L , 60L,  70L))
GetMarksSummary <- function (test.marks,summary.type) {
result <- switch (summary.type ,
"mean"= {mean(test.marks)},
"median"= {median(test.marks)},
"variance" = {var(test.marks)},
"Not Implemented")
result
}
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"mean")
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"median")
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"variance")
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"unknown")
test.marks <- c( 70L , 75L , 80L, NA)
ifelse(test.marks >= 75 , c("Great","Bravo","Excellent","Congrats"),
c("Keep it up","Not bad","Just missed","Jusk ok"))
WriteOnNoteBook <- function (total.page.count){
count <- 0
repeat
{
count <- count + 1
if (count > total.page.count) {
print ("page finished")
break
}
print (paste("printing on page number ", count))
}
}
WriteOnNoteBook(total.page.count = 1000)
WriteOnNoteBook <- function (total.page.count){
count <- 0
repeat
{
count <- count + 1
if (count > total.page.count) {
print ("page finished")
break
}
if (count %% 5 == 0){
print (paste ("skipping page number", count))
next
}
print (paste("printing on page number ", count))
}
}
WriteOnNoteBook(total.page.count = 1000)
student.marks <- matrix(c( 70L, 75L, 72L, 80L, 50L,
80L, 85L, 60L, 72L, 88L,
60L, 70L, 87L, 55L, 90L,
85L, 70L, 74L, 86L, 78L ),ncol=5,nrow=4, byrow=TRUE)
rownames(student.marks) <- c("Raj","Rahul","Priya","Poonam")
colnames(student.marks) <-
c("Physics","Chemistry","Mathematics", "Biology","History")
student.marks
bike <- BikeData
library("SDSFoundations")
bike <- BikeData
View(bike)
View(bike)
summary(bike)
table(bike$student)
student <- bike[bike$student ==1 , ]
View(student)
View(student)
table(student$cyc_freq)
mean(student$distance)
bike$times
bike[["times"]]
bike["times"]
bike[["time"]
bike[["time"]]
bike$time
bike[["time"]]
names(bike)
table(bike$student)
names(student)
table(student$cyc_freq)
dist <- student$distance
mean(student$distance)
table(bike$cyc_freq)
daily_riders <- bike[bike$cyc_freq == "Daily"], ]
daily_riders <- bike[bike$cyc_freq == "Daily" , ]
View(daily_riders)
table(daily_riders$gender)
mean(daily_riders$age)
View(daily_riders)
mean(daily_riders$age[daily_riders$gender == "M"])
mean(daily_riders$age[daily_riders$gender == "F"])
thirty_male <- bike[bike$age >= 30 & bike$gender == "M" & bike$cyc_freq == "Daily" , ]
View(thirty_male)
View(thirty_male)
install.packages("httr")
obj1 <- '[[1,2][3,4]]'
library(httr)
library(jsonlite)
object <- fromJSON(obj1)
str(object)
obj1 <- '[[1,2],[3,4]]'
object <- fromJSON(obj1)
str(object)
View(object)
View(object)
obj1 <- '{"a":[1,2],"b" : [3,4]}'
object <- fromJSON(obj1)
obj1 <- '[{"a": 1 , "b" : 2 }, {"a" : 3 , "b" : 4}]'
object <- fromJSON(obj1)
View(object)
View(object)
library(SDSFoundations)
animaldata <- AnimalData
View(animaldata)
table(animaldata[animaldata[animaldata$Animal.Type == "Dog" , ]$Intake.Type)
animaldog <- animaldata[animaldata$Animal.Type == "Dog" , ]
View(animaldog)
table(animaldog$Intake.Type)
81 / (1+81+20+189)
animaldog[animaldog$Intake.Type == "Owner Surrender, ]
animal.dog.ownersurrender <- animaldog[animaldog$Intake.Type == "Owner Surrender", ]
animal.dog.ownersurrender <- animaldog[animaldog$Intake.Type == "Owner Surrender", ]
table(animal.dog.ownersurrender$Outcome.Type)
View(animal.dog.ownersurrender)
library(SDSFoundations)
bull <- BullRiders
View(bull)
plot(bull$YearsPro, bull$BuckOuts14, xlab = 'Years Pro', ylab = 'Buckouts', main = 'Plot of Years Pro vs Backout')
abline(lm(bull$BuckOuts14~bull$YearsPro))
plot(bull$Events14,bull$BuckOuts14, xlab = 'Nb of Events', ylab = 'Buckouts', main = 'Plot of Events vs Buckouts')
abline(lm(bull$BuckOuts14~bull$Events14))
abline(lm(bull$Events14~bull$BuckOuts14))
abline(lm(bull$BuckOuts14~bull$Events14))
cor(bull$YearsPro, bull$BuckOuts14)
cor(bull$Events14,bull$BuckOuts14)
myvars <- c("YearsPro","BuckOuts14", "Events14")
cor(bull[ , myvars])
head(bull, n = 10)
bull13 <- bull[bull$Events13 > 0 , ]
hist(bull13$Rides13)
fivenum(bull13$Rides13)
sd(bull13$Rides13)
mean(bull13$Rides13)
hist(bull13$Top10_13)
fivenum(bull13$Top10_13)
sd(bull13$Top10_13)
mean(bull13$Top10_13)
plot(bull13$Rides13, bull13$Top10_13)
abline(lm(bull13$Top10_13~bull13$Rides13))
cor(bull13$Rides13, bull13$Top10_13)
vars <- c("Rides13","Top10_13")
cor(bull13[ , vars])
which(bull13$Top10_13 == 2 & bull13$Rides13 == 22)
bull13[4, ]
bull12 <- bull[bull$Events12 > 0 , ]
hist(bull12$Earnings12)
fivenum(bull12$Earnings12)
mean(bull12$Earnings12)
sd(bull12$Earnings12)
vars <- c("Earnings12", "RidePer12", "CupPoints12")
cor(bull12[ , vars])
plot(bull12$RidePer12, bull12$Earnings12)
plot(bull12$CupPoints12, bull12$Earnings12)
abline(lm(bull12$Earnings12~bull12$RidePer12))
plot(bull12$RidePer12, bull12$Earnings12)
abline(lm(bull12$Earnings12~bull12$RidePer12))
plot(bull12$CupPoints12, bull12$Earnings12)
abline(lm(bull12$Earnings12~bull12$CupPoints12))
which(bull12$Earnings12 == max(bull12$Earnings12))
bull12[4 , ]
bull12.nooutlier <- bull12[ bull12$Earnings12 < 1000000 , ]
cor(bull12.nooutlier[ , vars])
bull
newbull <- bull[bull$Events14 > 0, ]
RidesPerEvent14 <- newbull$Rides14/newbull$Events14
hist(RidesPerEvent14)
fivenum(RidesPerEvent14)
plot(RidesPerEvent14,newbull$Rank14)
ab(lm(newbull$Rank14~RidesPerEvent14))
ab(lm(newbull$Rank14~RidesPerEvent14))
abline(lm(newbull$Rank14~RidesPerEvent14))
cor(RidesPerEvent14,newbull$Rank14)
library(SDSFoundations)
acl <- AustinCityLimits
View(acl)
table(acl$Grammy)
gtab <- table(acl$Grammy)
prop.table(gtab)
67/116
49/116
gtab2 <- table(acl$Grammy, acl$Gender)
prop.table(gtab2)
prop.table(gtab2, 1)
gtab2
21/67
46/67
14/49
35/49
prop.table(gtab2, 2)
barplot(gtab2)
barplot(gtab)
barplot(gtab, main = "ACL Grammy Winners", xlab= "Grammy Winners", ylab = "Counts")
barplot(gtab2)
barplot(gtab2, legend = T)
barplot(gtab2, legend = T, main = "Gender by Grammy Winner", xlab = "Gender", beside = T)
barplot(prop.table(gtab2,2))
barplot(prop.table(gtab2,2), legend = T, beside = T)
barplot(prop.table(gtab2,2), legend = T, beside = T, main = "Gender by Grammy Winner", xlab = "Gender", ylab = "Proportion")
getwd()
setwd("F","Knowledge","edx","Foundation of Data Analysis - Part 1","Data")
setwd(file.path("F","Knowledge","edx","Foundation of Data Analysis - Part 1","Data"))
setwd(file.path("F:","Knowledge","edx","Foundation of Data Analysis - Part 1","Data"))
getwd()
file <- file.path("AustinCityLimits,csv")
acl <- read.table(file,header=TRUE,sep=",")
file <- file.path("AustinCityLimits,csv")
acl <- read.table(file,header=TRUE,sep=",")
file <- file.path("AustinCityLimits.csv")
acl <- read.table(file,header=TRUE,sep=",")
acl
acl <- read.table(file,header=TRUE,sep=",",skip = 1)
acl <- read.csv(file)
acl
View(acl)
acl <- read.table(file,header=TRUE)
acl <- read.table(file,header=TRUE, sep = ",")
acl <- read.table(file,header=TRUE, sep = ",", quote ="\"'")
acl <- read.table(file,header=TRUE, sep = ",", quote ="\"'")
View(acl)
acl <- read.table(file,header=TRUE, sep = ",",quote ="\"'")
acl <- read.table(file,header=TRUE,quote ="\"'")
acl <- read.table(file,header=TRUE,quote ="\"'", skip = 1)
acl <- read.table(file,header=TRUE,quote ="\"'", skip = 1, sep = ",")
View(acl)
acl <- read.table(file,header=TRUE,quote ="\"'", skip = 1, sep = ",")
acl <- read.table(file,header=TRUE,quote ="\"'",sep = ",")
View(acl)
acl <- read.table(file,header=TRUE,quote ="'",sep = ",")
acl <- read.table(file,header=TRUE,quote ="\"'",sep = ",")
acl <- read.table(file,header=TRUE,quote ="'",sep = ",")
library(readr)
acl <- read_csv("F:/Knowledge/edx/Foundation of Data Analysis - Part 1/Data/AustinCityLimits.csv")
View(acl)
summary(acl)
dim(acl)
head(acl, n = 10)
View(acl)
acl.30.or.older <- acl[acl$Age >= 30 , ]
genre <- table(acl.30.or.older$Genre)
gender <- table(acl.30.or.older$Gender)
twoway <- table(acl.30.or.older$Gender, acl.30.or.older$Genre)
twoway
barplot(twoway)
barplot(twoway,legend=T,beside=T)
prop.table(genre)
prop.table(twoway,1)
gender <- table(acl.30.or.older$Gender)
gender
genre
twoway
prop.table(twoway,1)
61/102
8/25
acl.male <- acl[acl$Gender == "M",]
genre <- table(acl.male$Genre)
grammy <- table(acl.male$Grammy)
genre
grammy
twoway <- table(acl.male$Gender,acl.male$Grammy)
prop.table(twoway , 1)
twoway <- table(acl.male$Genre,acl.male$Grammy)
prop.table(twoway , 1)
barplot(twoway,beside = T, legend = T)
twoway <- table(acl.male$Grammy,acl.male$Genre)
prop.table(twoway , 1)
barplot(twoway,beside = T, legend = T)
grammy
genre
twoway
grammy
prop.table(grammy)
prop.table(twoway , 2)
table(acl$Facebook.100k)
popular.facebook <- table(acl$Facebook.100k)
age.group <- table(acl$Age.Group)
popular.ageGroup <- table(age.group, popular.facebook)
popular.ageGroup <- table(acl$Age.Group, acl$Facebook.100k)
popular.ageGroup
popular.ageGroup <- table(acl$Facebook.100k, acl$Age.Group)
popular.ageGroup
popular.facebook
prop.table(popular.ageGroup, 2)
